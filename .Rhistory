mydata <- read.csv(file="http://www.football-data.co.uk/mmz4281/1516/E0.csv")
mydata
ls()
str(mydata)
y <- factor(mydata[,10], labels=c("","W","L","D"))
AbsFreq <- table(y)
PerFreq <- round(prop.table(AbsFreq )*100,1)
cbind(AbsFreq,PerFreq)
library(ggplot2)
Freq <- data.frame(PerFreq)
ggplot(Freq, aes(x="", fill=y, weight=Freq))+ geom_bar(width = 1)+scale_fill_manual(values=c("green","yellow","red"))+scale_y_continuous("Percentage frequency")+scale_x_discrete(name="")
mydata <- read.csv(file="http://www.football-data.co.uk/mmz4281/1516/E0.csv")
mydata
ls()
str(mydata)
y <- factor(mydata[,10], labels=c("","W","L","D"))
AbsFreq <- table(y)
PerFreq <- round(prop.table(AbsFreq )*100,1)
cbind(AbsFreq,PerFreq)
library(ggplot2)
Freq <- data.frame(PerFreq)
ggplot(Freq, aes(x="", fill=y, weight=Freq))+ geom_bar(width = 1)+scale_fill_manual(values=c("blue",green","yellow","red"))+scale_y_continuous("Percentage frequency")+scale_x_discrete(name="")
mydata <- read.csv(file="http://www.football-data.co.uk/mmz4281/1516/E0.csv")
mydata
ls()
str(mydata)
y <- factor(mydata[,10], labels=c("","W","L","D"))
AbsFreq <- table(y)
PerFreq <- round(prop.table(AbsFreq )*100,1)
cbind(AbsFreq,PerFreq)
library(ggplot)
Freq <- data.frame(PerFreq)
ggplot(Freq, aes(x="", fill=y, weight=Freq))+ geom_bar(width = 1)+scale_fill_manual(values=c("blue",green","yellow","red"))+scale_y_continuous("Percentage frequency")+scale_x_discrete(name="")
mydata <- read.csv(file="http://www.football-data.co.uk/mmz4281/1516/E0.csv")
mydata
ls()
str(mydata)
y <- factor(mydata[,10], labels=c("","W","L","D"))
AbsFreq <- table(y)
PerFreq <- round(prop.table(AbsFreq )*100,1)
cbind(AbsFreq,PerFreq)
library(ggplot2)
Freq <- data.frame(PerFreq)
ggplot(Freq, aes(x="", fill=y, weight=Freq))+ geom_bar(width = 1)+scale_fill_manual(values=c("blue",green","yellow","red"))+scale_y_continuous("Percentage frequency")+scale_x_discrete(name="")
mydata <- read.csv(file="http://www.football-data.co.uk/mmz4281/1516/E0.csv")
mydata
ls()
str(mydata)
y <- factor(mydata[,10], labels=c("W","L","D"))
AbsFreq <- table(y)
PerFreq <- round(prop.table(AbsFreq )*100,1)
cbind(AbsFreq,PerFreq)
library(ggplot2)
Freq <- data.frame(PerFreq)
ggplot(Freq, aes(x="", fill=y, weight=Freq))+ geom_bar(width = 1)+scale_fill_manual(values=c("blue",green","yellow","red"))+scale_y_continuous("Percentage frequency")+scale_x_discrete(name="")
mydata <- read.csv(file="http://www.football-data.co.uk/mmz4281/1516/E0.csv")
mydata
ls()
str(mydata)
y <- factor(mydata[,10], labels=c("W","L","D"))
AbsFreq <- table(y)
PerFreq <- round(prop.table(AbsFreq )*100,1)
cbind(AbsFreq,PerFreq)
library(ggplot2)
Freq <- data.frame(PerFreq)
ggplot(Freq, aes(x="", fill=y, weight=Freq))+ geom_bar(width = 1)+scale_fill_manual(values=c("green","yellow","red"))+scale_y_continuous("Percentage frequency")+scale_x_discrete(name="")
mydata <- read.csv(file="http://www.football-data.co.uk/mmz4281/1516/E0.csv")
mydata
ls()
str(mydata)
y <- factor(mydata[,10], labels=c("W","L","D"))
AbsFreq <- table(y)
PerFreq <- round(prop.table(AbsFreq )*100,1)
cbind(AbsFreq,PerFreq)
library(ggplot2)
Freq <- data.frame(PerFreq)
ggplot(Freq, aes(x="", fill=y, weight=Freq))+ geom_bar(width = 1)+scale_fill_manual(values=c("green","yellow","red"))+scale_y_continuous("Percentage frequency")+scale_x_discrete(name="")
mydata <- read.csv(file="http://www.football-data.co.uk/mmz4281/1516/E0.csv")
mydata
ls()
str(mydata)
y <- factor(mydata[,10], labels=c("W","L","D"))
AbsFreq <- table(y)
PerFreq <- round(prop.table(AbsFreq )*100,1)
cbind(AbsFreq,PerFreq)
library(ggplot2)
Freq <- data.frame(PerFreq)
gplot(Freq, aes(x="", fill=y, weight=Freq))+ geom_bar(width = 1)+scale_fill_manual(values=c("green","yellow","red"))+scale_y_continuous("Percentage frequency")+scale_x_discrete(name="")
mydata <- read.csv(file="http://www.football-data.co.uk/mmz4281/1516/E0.csv")
mydata
ls()
str(mydata)
y <- factor(mydata[,10], labels=c("W","L","D"))
AbsFreq <- table(y)
PerFreq <- round(prop.table(AbsFreq )*100,1)
cbind(AbsFreq,PerFreq)
library(ggplot2)
Freq <- data.frame(PerFreq)
ggplot(Freq, aes(x="", fill=y, weight=Freq))+ geom_bar(width = 1)+scale_fill_manual(values=c("green","yellow","red"))+scale_y_continuous("Percentage frequency")+scale_x_discrete(name="")
mydata <- read.csv(file="http://www.football-data.co.uk/mmz4281/1516/E0.csv")
mydata
ls()
str(mydata)
y <- factor(mydata[,10], labels=c("W","L","D"))
AbsFreq <- table(y)
PerFreq <- round(prop.table(AbsFreq )*100,1)
cbind(AbsFreq,PerFreq)
library(ggplot2)
Freq <- data.frame(PerFreq)
ggplot(Freq, aes(x="", fill=y, weight=Freq))+ geom_bar(width = 1)+scale_fill_manual(values=c("green","yellow","red"))+scale_y_continuous("Percentage frequency")+scale_x_discrete(name="")
source('~/.active-rstudio-document')
xlab="", ylab="Miles per Gallon")
# ggplot2 examples
library(ggplot2)
# create factors with value labels
mtcars$gear <- factor(mtcars$gear,levels=c(3,4,5),
labels=c("3gears","4gears","5gears"))
mtcars$am <- factor(mtcars$am,levels=c(0,1),
labels=c("Automatic","Manual"))
mtcars$cyl <- factor(mtcars$cyl,levels=c(4,6,8),
labels=c("4cyl","6cyl","8cyl"))
# Kernel density plots for mpg
# grouped by number of gears (indicated by color)
qplot(mpg, data=mtcars, geom="density", fill=gear, alpha=I(.5),
main="Distribution of Gas Milage", xlab="Miles Per Gallon",
ylab="Density")
# Scatterplot of mpg vs. hp for each combination of gears and cylinders
# in each facet, transmittion type is represented by shape and color
qplot(hp, mpg, data=mtcars, shape=am, color=am,
facets=gear~cyl, size=I(3),
xlab="Horsepower", ylab="Miles per Gallon")
# Separate regressions of mpg on weight for each number of cylinders
qplot(wt, mpg, data=mtcars, geom=c("point", "smooth"),
method="lm", formula=y~x, color=cyl,
main="Regression of MPG on Weight",
xlab="Weight", ylab="Miles per Gallon")
# Boxplots of mpg by number of gears
# observations (points) are overlayed and jittered
qplot(gear, mpg, data=mtcars, geom=c("boxplot", "jitter"),
fill=gear, main="Mileage by Gear Number", xlab="", ylab="Miles per Gallon")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document')
# observations (points) are overlayed and jittered
mydata <- read.csv(file="http://www.football-data.co.uk/mmz4281/1516/E0.csv")
mydata
ls()
str(mydata)
y <- factor(mydata[,10], labels=c("W","L","D"))
AbsFreq <- table(y)
PerFreq <- round(prop.table(AbsFreq )*100,1)
cbind(AbsFreq,PerFreq)
library(ggplot2)
Freq <- data.frame(PerFreq)
ggplot(Freq, aes(x="", fill=y, weight=Freq))+ geom_bar(width = 1)+scale_fill_manual(values=c("green","yellow","red"))+scale_y_continuous("Percentage frequency")+scale_x_discrete(name="")
2*7
2*7
console.log(sum(range(1,10)));
> 4+4
4+6
R.version
options(CRAN='http://cran.r-project.org')
install.packages(''RMySQL'')
install.packages('RMySQL')
installed.packages()
old.packages()
update.packages()
y
y
y
y
y
y
y
x
x = x+6
x
y
y
y
3+4
x
x
ls
exists('x')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
x
4+5
x
print(x)
x
x
x
x
x
R.version
update.packages()
y <- 9
y
y
y
5+6
x
z <- 5
w <- z^2
w
(34 + 90)/12.5
ls()
rm(y)
ls()
rm(w, z)
v <- c(4,7,23.5, 76.2,"rr")
v
mode(v)
length(v)
v[1] <- "heelo"
v
v1 <- c(4, 5)
v2 <- c(2,3)
v1 * v2
v3 <- (2,3,5)
v3 <- (2,3,5)
v3 <- (2, 3, 5)
v3 <- (2, 1, 4)
v3 <- (4, 1, 4)
v6 <- (3,6)
v1 * v2
v3 <- (2,1)
v3 <- (2 1)
v1 <- c(3,4,5,6,7)
v2 <- c(3,4,5,6)
v1 * v2
g <- factor(c('f','m','m','m','f','m','f','m','f','f'))
g
a<- factor(c('adult','adult','juvenile','juvenile'
,'adult','adult','adult','juvenile','adult','juvenile'))
a
table (a,g)
t <- table(a, g)
margin.table(t,1)
margin.table(t,2)
prop.table(t,2)
prop.table(t,1)
prop.table(t)
rnorm(10)
rnorm(10,mean=10,sd=3)
rt(5,df=10)
m <- c(1,2,3,4,5,6,6,7,7,6)
dim(m) <- c(3,4)
dim(m) <- c(2,5)
m
m[2,2]
m[1,-c(2)]
m
m[1,]
m[,4]
a <- array(1:50, dim(c(2,5,5)))
a <- array(1:50, dim=(c(2,5,5)))
a
a[1,5,2]
a[1,,4]
a[1,3,]
a[1,c(1,5),-c(4,5)]
se
se <- function(x){}
v <- var(x)
return(sqrt(v/n))
se(9)
se(c(45,2,3,5,76,2,4))
se(c(45,2,3,5,76,2,4))
se(c(45,2,3,5,76,2,4))
se(c(45,2,3,5,76,2,4))
k
k <- c(45,2,3,5,76,2,4)
k
se <- function(x)
{
v <- var(x)
n <- length(x)
return(sqrt(v/n))
}
se(k)
se <- function(x)
{
v <- var(x)
n <- length(x)
return(sqrt(v/n))
}
k <- c(45,2,3,5,76,2,4)
se(k)
save(se,file='mysession.R')
save(se,file='mysession.R')
save(se,file='User/ngocthinhnguyen/Desktop/mysession.R')
save(se,file='Desktop/mysession.R')
save(se,file='Desktop/mysession.R')
load(Desktop/mysession.R')
load('Desktop/mysession.R')
setwd("~/omnetpp-5.2/samples/inet/examples/diffserv/onedomain")
#
# Copyright (C) 2012 Opensim Ltd.
# Author: Tamas Borbely
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.
#
require(omnetpp)
require(ggplot2)
dataset <- loadDataset(c("results/Exp2*-*.sca", "results/Exp2*-*.vec"))
configs <- with(subset(dataset$runattrs, attrname=="configname"),
data.frame(runid=runid,
config=as.character(attrvalue),
stringsAsFactors=FALSE))
iaTime <- cast(dataset$scalars, runid~name, value='value', subset=name=='iaTime')
iaTime <- transform(iaTime, load=4000/iaTime)
runattrs <- merge(configs, iaTime)
scalars <- merge(dataset$scalars, runattrs, by="runid")
vectors <- merge(dataset$vectors, runattrs, by="runid")
moduleToSLA <- function(module) {
if (grepl("\\.H1\\.", module) || grepl("\\.H5\\.", module))
"SLA1"
else if (grepl("\\.H2\\.", module) || grepl("\\.H6\\.", module))
"SLA2"
else if (grepl("\\.H3\\.", module) || grepl("\\.H7\\.", module))
"SLA3"
else
NA_character_
}
scalars <- transform(scalars, SLA=sapply(module, moduleToSLA))
vectors <- transform(vectors, SLA=sapply(module, moduleToSLA))
# voice loss
voicePkLoss = cast(scalars, config+load+SLA~name, value='value',
subset= ((grepl('H[1-3].*udpApp\\[0\\]', module) & name=='sentPk:count') |
(grepl('H[5-7].*udpApp\\[0\\]', module) & name=='rcvdPk:count')))
voicePkLoss <- transform(voicePkLoss,
loss=(`sentPk:count`-`rcvdPk:count`)/`sentPk:count`)
pkLossPlot <- function(data, title) {
ggplot(data, aes(x=load, y=loss, colour=SLA)) +
geom_line() +
scale_colour_manual(values=c('SLA1'='green','SLA2'='yellow','SLA3'='red')) +
facet_wrap(~config) +
opts(title=title)
}
voicePkLoss.plot <- pkLossPlot(voicePkLoss, 'Exp 2 Increasing Traffic Load (voice)')
# video loss
videoPkLoss <- cast(scalars, config+load+SLA~name, value='value',
subset= ((grepl('H[1-3].*udpApp\\[1\\]', module) & name=='sentPk:count') |
(grepl('H[5-7].*udpApp\\[1\\]', module) & name=='rcvdPk:count')))
videoPkLoss <- transform(videoPkLoss,
loss=(`sentPk:count`-`rcvdPk:count`)/`sentPk:count`)
videoPkLoss.plot <- pkLossPlot(videoPkLoss, 'Exp 2 Increasing Traffic Load (video)')
# voice loss per color
voicePkLossPerColor.plot <- ggplot(subset(voicePkLoss, config!='Exp24'), aes(x=load,y=loss,colour=config)) +
geom_line() +
scale_colour_manual(values=c('Exp21'='green','Exp22'='yellow','Exp23'='red')) +
facet_wrap(~SLA) +
opts(title='Comparison of green/yellow/red traffic (voice)')
# average length of R2.ppp[2] queue
queueLength <- cast(scalars, config+load~name, value='value',
subset= (grepl('R2\\.ppp\\[2\\]', module) & name=='queueLength:timeavg'))
queueLength.plot <- ggplot(queueLength,
aes(x=load, y=`queueLength:timeavg`, colour=config)) +
geom_line() +
scale_colour_manual(values=c('Exp21'='green','Exp22'='yellow','Exp23'='red')) +
opts(title='Exp 2 R2 Queue - Average Queue Length') +
ylab('Average queue length')
plotAll <- function() {
plot <- function(p) {
if (names(dev.cur())!='RStudioGD')
dev.new()
print(p)
}
plot(voicePkLoss.plot)
plot(videoPkLoss.plot)
plot(voicePkLossPerColor.plot)
plot(queueLength.plot)
}
plot(voicePkLoss.plot)
setwd("~/omnetpp-5.2/samples/inet/examples/diffserv/onedomain")
#
# Copyright (C) 2012 Opensim Ltd.
# Author: Tamas Borbely
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.
#
require(omnetpp)
require(ggplot2)
dataset <- loadDataset(c("results/Exp1*-0.sca", "results/Exp1*-0.vec"))
configs <- with(subset(dataset$runattrs, attrname=="configname"),
data.frame(runid=runid,
config=as.character(attrvalue),
stringsAsFactors=FALSE))
scalars <- merge(dataset$scalars, configs, by="runid")
vectors <- merge(dataset$vectors, configs, by="runid")
medianOfVector <- function(vectorkey) {
d <- loadVectors(dataset, vectorkey)
median(d$vectordata$y)
}
moduleToSLA <- function(module) {
if (grepl("\\.H1\\.", module) || grepl("\\.H5\\.", module))
"SLA1"
else if (grepl("\\.H2\\.", module) || grepl("\\.H6\\.", module))
"SLA2"
else if (grepl("\\.H3\\.", module) || grepl("\\.H7\\.", module))
"SLA3"
else if (grepl("\\.H4\\.", module) || grepl("\\.H8\\.", module))
"SLA4"
else
NA_character_
}
scalars <- transform(scalars, SLA=sapply(module, moduleToSLA))
vectors <- transform(vectors, SLA=sapply(module, moduleToSLA))
computePkLoss <- function(appType) { # 0 = voice, 1 = video
senderModules <- paste('H[1-4].*udpApp\\[',appType,'\\]', sep='')
receiverModules <- paste('H[5-8].*udpApp\\[',appType,'\\]', sep='')
d <- cast(scalars, config+SLA~name, value='value',
subset= ((grepl(senderModules, module) & name=='sentPk:count') |
(grepl(receiverModules, module) & name=='rcvdPk:count')))
transform(d, loss=(`sentPk:count`-`rcvdPk:count`)/`sentPk:count`)
}
# voice loss
voicePkLoss <- computePkLoss(0)
voicePkLoss.plot <- ggplot(voicePkLoss, aes(x=config, y=loss, fill=SLA)) +
geom_bar(position='dodge') +
opts(title='Exp 1 Loss Average (voice)')
# video loss
videoPkLoss <- computePkLoss(1)
videoPkLoss.plot <- ggplot(videoPkLoss, aes(x=config, y=loss, fill=SLA)) +
geom_bar(position='dodge') +
opts(title='Exp 1 Loss Average (video)')
# voice delay
voiceDelay <- subset(vectors, grepl('H[5-8].*udpApp\\[0\\]', module) & name=='endToEndDelay:vector')
voiceDelay <- transform(voiceDelay, medianDelay=sapply(resultkey, medianOfVector))
voiceDelay.plot <- ggplot(voiceDelay, aes(x=config, y=medianDelay, fill=SLA)) +
geom_bar(position='dodge') +
opts(title="Exp 1 Delay Median (voice)")
# video delay
videoDelay <- subset(vectors, grepl('H[5-8].*udpApp\\[1\\]', module) & name=='endToEndDelay:vector')
videoDelay <- transform(videoDelay, medianDelay=sapply(resultkey, medianOfVector))
videoDelay.plot <- ggplot(videoDelay, aes(x=config, y=medianDelay, fill=SLA)) +
geom_bar(position='dodge') +
opts(title="Exp 1 Delay Median (video)")
#
# Part 2: displaying R2 queue statistics
#
modulesToDscps <- function(modules) {
sub('.*\\.(.*?)x?Queue', '\\U\\1', modules, perl=TRUE)
}
queueScalars <- subset(scalars, grepl('R2.*ppp\\[2\\].*Queue', module) & config!='Exp17')
queueScalars <- transform(queueScalars, dscp=modulesToDscps(module))
queueScalars <- subset(queueScalars, dscp!='BE')
queueVectors <- subset(vectors, grepl('R2.*ppp\\[2\\].*Queue', module) & config!='Exp17')
queueVectors <- transform(queueVectors, dscp=modulesToDscps(module))
queueVectors <- subset(queueVectors, dscp!='BE')
# R2.ppp[2] queue packet loss
queuePkLoss <- cast(queueScalars, config+dscp~name, value='value',
subset=(name=='rcvdPk:count' | name=='dropPk:count'))
queuePkLoss <- transform(queuePkLoss, loss=`dropPk:count`/`rcvdPk:count`)
queuePkLoss.plot <- ggplot(queuePkLoss, aes(x=config, y=loss, fill=dscp)) +
geom_bar(position='dodge') +
opts(title='Exp 1 R2 Queue Packet Loss')
# R2.ppp[2] queue delay
queueDelay <- subset(queueVectors, name=='queueingTime:vector')
queueDelay <- transform(queueDelay, delay=sapply(resultkey, medianOfVector))
queueDelay.plot <- ggplot(queueDelay, aes(x=config, y=delay, fill=dscp)) +
geom_bar(position='dodge') +
opts(title='Exp 1 R2 Queue Delay')
# R2.ppp[2] queue length
queueLength <- subset(queueScalars,
name=='queueLength:timeavg',
c('config', 'dscp', 'value'))
queueLength.plot <- ggplot(queueLength, aes(x=config, y=value, fill=dscp)) +
geom_bar(position='dodge') +
opts(title='Exp 1 R2 - Average Queue Length')
plotAll <- function() {
plot <- function(p) {
if (names(dev.cur())!='RStudioGD')
dev.new()
print(p)
}
plot(voicePkLoss.plot)
plot(videoPkLoss.plot)
plot(voiceDelay.plot)
plot(videoDelay.plot)
plot(queuePkLoss.plot)
plot(queueDelay.plot)
plot(queueLength.plot)
}
plot(voicePkLoss.plot)
setwd("~/omnetpp-5.2/samples/inet/examples/diffserv/onedomain")
getwd()
plot(videoPkLoss.plot)
